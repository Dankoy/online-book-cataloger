spring:
  application:
    name: spring-cloud-gateway

  session:
    redis:
      namespace: spring:session:library
      repository-type: default
      flush-mode: on_save

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: 6379
      password: ${REDIS_PASSWORD:redispass}

  cloud:
    gateway:
      httpclient:
        pool:
          type: elastic
          max-connections: 1000
          acquire-timeout: 80000
          max-life-time: 300s
          max-idle-time: 20000
        connect-timeout: 30000
        response-timeout: 60s
      default-filters:
        - name: Retry
          args:
            methods: GET,PUT,POST,DELETE
            exceptions:
              - reactor.netty.http.client.PrematureCloseException
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes:
        - id: library-discovery-server
          uri: lb://library-discovery-server
          predicates:
            - Path=/registry/**
          filters:
            - StripPrefix=1
        - id: eureka
          uri: lb://library-discovery-server
          predicates:
            - Path=/eureka/**
        - id: library-registration
          uri: lb://spring-authorization-server
          predicates:
            - Path=/api/v1/register
        - id: library
          uri: lb://library-backend
          predicates:
            - Path=/library/**
          filters:
            - SaveSession
            - StripPrefix=1
            - TokenRelay=
            - RemoveRequestHeader=Cookie

  security:
    oauth2:
      client:
        registration:
          gateway:
            provider: spring
            client-id: gateway
#            client-secret: $2a$10$ur3iG0Do9xyrqTWJHGZQJ.uY8mpxernuB7sO1ZPWUZMBgsaW3ugmy # secret
            client-secret: secret # secret
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: openid,profile,email,offline_access
        provider:
          spring:
            issuer-uri: ${OAUTH_PROVIDER:http://localhost:9000}

eureka:
  client:
    registerWithEureka: true
    serviceUrl:
      defaultZone: ${EUREKA_SERVER:http://localhost:8761/eureka}
    healthcheck:
      enabled: true
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    instance-id: "${spring.application.name}:${server.port}"

management:
  info:
    env:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
    gateway:
      enabled: true
  health:
    defaults:
      enabled: true
    diskspace:
      enabled: true
  tracing:
    sampling:
      probability: 1.0

  # For Exemplars to work we need histogram buckets
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        http.server.requests: true

server:
  port: 8080
#  forward-headers-strategy: framework

info:
  app:
    name: ${spring.application.name}

logging:
  level:
    root: INFO
    org:
      springframework:
        security: info
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
